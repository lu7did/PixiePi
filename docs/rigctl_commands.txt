Commands  can  be  sent  over the TCP socket either as a single char, or as a long command

       name plus the value(s) space separated on one '\n' terminated line. See PROTOCOL.

       Since most of the Hamlib operations have a set and a get method, an upper case letter will
       be  used  for  set  methods  whereas the corresponding lower case letter refers to the get
       method.  Each operation also has a long name; prepend a backslash to send a  long  command
       name.

       Example (Perl): `print $socket "\\dump_caps\n";' to see what the radio's backend can do
       (N.B.: In Perl and many other languages a '\' will need to be escaped with a preceding '\'
       so that even though two backslash characters appear in the code, only one will  be  passed
       to rigctld.  This is a possible bug, beware!).

       Please  note  that the backend for the radio to be controlled, or the radio itself may not
       support some commands. In that case, the operation will fail with a Hamlib error message.

       Here is a summary of the supported commands (In the case  of  "set"  commands  the  quoted
       string  is  replaced  by  the value in the description.  In the case of "get" commands the
       quoted string is the key name of the value returned.):

       F, set_freq 'Frequency'
              Set 'Frequency', in Hz.

       f, get_freq
              Get 'Frequency', in Hz.

       M, set_mode 'Mode' 'Passband'
              Set 'Mode': USB, LSB, CW, CWR, RTTY, RTTYR,  AM,  FM,  WFM,  AMS,  PKTLSB,  PKTUSB,
              PKTFM, ECSSUSB, ECSSLSB, FAX, SAM, SAL, SAH, DSB.

              Set 'Passband' in Hz, or '0' for the Hamlib backend default.

       m, get_mode
              Get 'Mode' 'Passband'.

              Returns Mode as a string from set_mode above and Passband in Hz.

       V, set_vfo 'VFO'
              Set 'VFO': VFOA, VFOB, VFOC, currVFO, VFO, MEM, Main, Sub, TX, RX.

              In VFO mode only a single VFO parameter is required.

       v, get_vfo
              Get current 'VFO'.

              Returns VFO as a string from set_vfo above.

       J, set_rit 'RIT'
              Set 'RIT', in Hz, can be + or -.

              A  value  of  '0'  resets RIT and *should* turn RIT off.  If not, file a bug report
              against the Hamlib backend.

       j, get_rit
              Get 'RIT', in Hz.

       Z, set_xit 'XIT'
              Set 'XIT', in Hz can be + or -.

              A value of '0' resets RIT and *should* turn RIT off.  If not,  file  a  bug  report
              against the Hamlib backend.

       z, get_xit
              Get 'XIT', in Hz.

       T, set_ptt 'PTT'
              Set 'PTT', 0 (RX) or 1 (TX).

       t, get_ptt
              Get 'PTT' status.

       0x8b, get_dcd
              Get 'DCD' (squelch) status, 0 (Closed) or 1 (Open)

       R, set_rptr_shift 'Rptr Shift'
              Set 'Rptr Shift': "+", "-" or something else for none.

       r, get_rptr_shift
              Get 'Rptr Shift'.  Returns "+", "-" or "None".

       O, set_rptr_offs 'Rptr Offset'
              Set 'Rptr Offset', in Hz.

       o, get_rptr_offs
              Get 'Rptr Offset', in Hz.

       C, set_ctcss_tone 'CTCSS Tone'
              Set 'CTCSS Tone', in tenths of Hz.

       c, get_ctcss_tone
              Get 'CTCSS Tone', in tenths of Hz.

       D, set_dcs_code 'DCS Code'
              Set 'DCS Code'.

       d, get_dcs_code
              Get 'DCS Code'.

       0x90, set_ctcss_sql 'CTCSS Sql'
              Set 'CTCSS Sql' tone, in tenths of Hz.

       0x91, get_ctcss_sql
              Get 'CTCSS Sql' tone, in tenths of Hz.

       0x92, set_dcs_sql 'DCS Sql'
              Set 'DCS Sql' code.

       0x93, get_dcs_sql
              Get 'DCS Sql' code.

       I, set_split_freq 'Tx Frequency'
              Set 'TX Frequency', in Hz.

       i, get_split_freq
              Get 'TX Frequency', in Hz.

       X, set_split_mode 'TX Mode' 'TX Passband'
              Set  'TX  Mode':  AM, FM, CW, CWR, USB, LSB, RTTY, RTTYR, WFM, AMS, PKTLSB, PKTUSB,
              PKTFM, ECSSUSB, ECSSLSB, FAX, SAM, SAL, SAH, DSB.

              The 'TX Passband' is the exact passband in  Hz,  or  '0'  for  the  Hamlib  backend
              default.

       x, get_split_mode
              Get 'TX Mode' and 'TX Passband'.

              Returns TX mode as a string from set_split_mode above and TX passband in Hz.

       S, set_split_vfo 'Split' 'TX VFO'
              Set 'Split' mode, '0' or '1', and 'TX VFO' from set_vfo above.

       s, get_split_vfo
              Get 'Split' mode, '0' or '1', and 'TX VFO'.

       N, set_ts 'Tuning Step'
              Set 'Tuning Step', in Hz.

       n, get_ts
              Get 'Tuning Step', in Hz.

       U, set_func 'Func' 'Func Status'
              Set 'Func' 'Func Status'.

              Func  is  one of: FAGC, NB, COMP, VOX, TONE, TSQL, SBKIN, FBKIN, ANF, NR, AIP, APF,
              MON, MN, RF, ARO, LOCK, MUTE, VSC, REV, SQL, ABM, BC,  MBC,  AFC,  SATMODE,  SCOPE,
              RESUME, TBURST, TUNER.

              Func  Status  argument is a non null value for "activate", "de-activate" otherwise,
              much as TRUE/FALSE definitions in C language.

       u, get_func
              Get 'Func' 'Func Status'.

              Returns Func as a string from set_func above and Func status as a non null value.

       L, set_level 'Level' 'Level Value'
              Set 'Level' and 'Level Value'.

              Level is one of: PREAMP, ATT, VOX, AF, RF,  SQL,  IF,  APF,  NR,  PBT_IN,  PBT_OUT,
              CWPITCH,  RFPOWER, MICGAIN, KEYSPD, NOTCHF, COMP, AGC, BKINDL, BAL, METER, VOXGAIN,
              ANTIVOX, SLOPE_LOW, SLOPE_HIGH, RAWSTR, SQLSTAT, SWR, ALC, STRENGTH.

              The Level Value can be a float or an integer.

       l, get_level
              Get 'Level' 'Level Value'.

              Returns Level as a string from set_level above  and  Level  value  as  a  float  or
              integer.

       P, set_parm 'Parm' 'Parm Value'
              Set 'Parm' 'Parm Value'

              Parm is one of: ANN, APO, BACKLIGHT, BEEP, TIME, BAT, KEYLIGHT.

       p, get_parm
              Get 'Parm' 'Parm Value'.

              Returns Parm as a string from set_parm above and Parm Value as a float or integer.

       B, set_bank 'Bank'
              Set 'Bank'.  Sets the current memory bank number.

       E, set_mem 'Memory#'
              Set 'Memory#' channel number.

       e, get_mem
              Get 'Memory#' channel number.

       G, vfo_op 'Mem/VFO Op'
              Perform 'Mem/VFO Op'.

              Mem  VFO  operation is one of: CPY, XCHG, FROM_VFO, TO_VFO, MCL, UP, DOWN, BAND_UP,
              BAND_DOWN, LEFT, RIGHT, TUNE, TOGGLE.

       g, scan 'Scan Fct' 'Scan Channel'
              Perform 'Scan Fct' 'Scan Channel'.

              Scan function/channel is one of: STOP, MEM, SLCT, PRIO, PROG, DELTA, VFO, PLT.

       H, set_channel 'Channel'
              Set memory 'Channel' data. Not implemented yet.

       h, get_channel
              Get memory 'Channel' data. Not implemented yet.

       A, set_trn 'Transceive'
              Set 'Transceive' mode (reporting event): OFF, RIG, POLL.

       a, get_trn
              Get 'Transceive' mode (reporting event) as in set_trn above.

       Y, set_ant 'Antenna'
              Set 'Antenna' number (0, 1, 2, ..).

       y, get_ant
              Get 'Antenna' number (0, 1, 2, ..).

       *, reset 'Reset'
              Perform rig 'Reset'.

              0 = None, 1 = Software reset, 2 = VFO reset, 4 = Memory Clear  reset,  8  =  Master
              reset.  Since these values are defined as a bitmask in rig.h, it should be possible
              to AND these values together to do multiple resets at once, if the backend supports
              it or supports a reset action via rig control at all.

       b, send_morse 'Morse'
              Send 'Morse' symbols.

       0x87, set_powerstat 'Power Status'
              Set power On/Off/Standby 'Power Status'.

              0 = Power Off, 1 = Power On, 2 = Power Standby.  Defined as a bitmask in rig.h.

       0x88, get_powerstat
              Get power On/Off/Standby 'Power Status' as in set_powerstat above.

       0x89, send_dtmf 'Digits'
              Set DTMF 'Digits'.

       0x8a, recv_dtmf
              Get DTMF 'Digits'.

       _, get_info
              Get misc information about the rig (no VFO in 'VFO mode' or value is passed).

       1, dump_caps
              Not  a  real  rig remote command, it just dumps capabilities, i.e. what the backend
              knows about this model, and what it can do.  TODO: Ensure this is in  a  consistent
              format so it can be read into a hash, dictionary, etc.  Bug reports requested.

              N.B.:  This command will produce many lines of output so be very careful if using a
              fixed length array!  For example, running this command against  the  Dummy  backend
              results in over 5kB of text output.

              VFO parameter not used in 'VFO mode'.

       2, power2mW 'Power [0.0..1.0]' 'Frequency' 'Mode'
              Returns 'Power mW'

              Converts  a  Power  value  in  a range of 0.0 ... 1.0 to the real transmit power in
              milli-Watts (integer).  The frequency and mode also need to be provided  as  output
              power may vary according to these values.

              VFO parameter not used in 'VFO mode'.

       4, mW2power 'Power mW' 'Frequency' 'Mode'
              Returns 'Power [0.0..1.0]'

              Converts  the  real  transmit  power in milli-Watts (integer) to a Power value in a
              range of 0.0 ... 1.0.  The frequency and mode also need to be  provided  as  output
              power may vary according to these values.

              VFO parameter not used in 'VFO mode'.

       w, send_cmd 'Cmd'
              Send raw command string to rig.

              For  binary  protocols enter values as \0xAA\0xBB.    Expect a 'Reply' from the rig
              which will likely be a binary block or an ASCII string.

       chk_vfo
              Returns "CHKVFO 1\n" (single line only) if rigctld was invoked with the -o or --vfo
              option, "CHKVFO 0\n" if not.

              When  in VFO mode the client will need to pass 'VFO' as the first parameter to \set
              or \get commands.  'VFO' is one of the strings defined for \set_vfo above.


